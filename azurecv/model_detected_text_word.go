/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetectedTextWord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetectedTextWord{}

// DetectedTextWord A detected word consisting of a contiguous sequence of characters. For non-space delimited languages,\\r\\nsuch as Chinese, Japanese, and Korean, each character is represented as its own word.
type DetectedTextWord struct {
	// Text content of the word.
	Text string `json:"text"`
	// Bounding polygon of the word.
	BoundingPolygon []ImagePoint `json:"boundingPolygon"`
	// The level of confidence that the word was detected. Confidence scores span the range of 0.0 to 1.0 (inclusive), with higher values indicating a higher confidence of a match.
	Confidence float64 `json:"confidence"`
}

type _DetectedTextWord DetectedTextWord

// NewDetectedTextWord instantiates a new DetectedTextWord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectedTextWord(text string, boundingPolygon []ImagePoint, confidence float64) *DetectedTextWord {
	this := DetectedTextWord{}
	this.Text = text
	this.BoundingPolygon = boundingPolygon
	this.Confidence = confidence
	return &this
}

// NewDetectedTextWordWithDefaults instantiates a new DetectedTextWord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectedTextWordWithDefaults() *DetectedTextWord {
	this := DetectedTextWord{}
	return &this
}

// GetText returns the Text field value
func (o *DetectedTextWord) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *DetectedTextWord) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *DetectedTextWord) SetText(v string) {
	o.Text = v
}

// GetBoundingPolygon returns the BoundingPolygon field value
func (o *DetectedTextWord) GetBoundingPolygon() []ImagePoint {
	if o == nil {
		var ret []ImagePoint
		return ret
	}

	return o.BoundingPolygon
}

// GetBoundingPolygonOk returns a tuple with the BoundingPolygon field value
// and a boolean to check if the value has been set.
func (o *DetectedTextWord) GetBoundingPolygonOk() ([]ImagePoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoundingPolygon, true
}

// SetBoundingPolygon sets field value
func (o *DetectedTextWord) SetBoundingPolygon(v []ImagePoint) {
	o.BoundingPolygon = v
}

// GetConfidence returns the Confidence field value
func (o *DetectedTextWord) GetConfidence() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value
// and a boolean to check if the value has been set.
func (o *DetectedTextWord) GetConfidenceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confidence, true
}

// SetConfidence sets field value
func (o *DetectedTextWord) SetConfidence(v float64) {
	o.Confidence = v
}

func (o DetectedTextWord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetectedTextWord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["boundingPolygon"] = o.BoundingPolygon
	toSerialize["confidence"] = o.Confidence
	return toSerialize, nil
}

func (o *DetectedTextWord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"boundingPolygon",
		"confidence",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetectedTextWord := _DetectedTextWord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetectedTextWord)

	if err != nil {
		return err
	}

	*o = DetectedTextWord(varDetectedTextWord)

	return err
}

type NullableDetectedTextWord struct {
	value *DetectedTextWord
	isSet bool
}

func (v NullableDetectedTextWord) Get() *DetectedTextWord {
	return v.value
}

func (v *NullableDetectedTextWord) Set(val *DetectedTextWord) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectedTextWord) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectedTextWord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectedTextWord(val *DetectedTextWord) *NullableDetectedTextWord {
	return &NullableDetectedTextWord{value: val, isSet: true}
}

func (v NullableDetectedTextWord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectedTextWord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


