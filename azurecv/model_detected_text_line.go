/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetectedTextLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetectedTextLine{}

// DetectedTextLine A detected text line.
type DetectedTextLine struct {
	// Text content of the detected text line.
	Text string `json:"text"`
	// Bounding polygon of the text line.
	BoundingPolygon []ImagePoint `json:"boundingPolygon"`
	// List of words in the text line.
	Words []DetectedTextWord `json:"words"`
}

type _DetectedTextLine DetectedTextLine

// NewDetectedTextLine instantiates a new DetectedTextLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectedTextLine(text string, boundingPolygon []ImagePoint, words []DetectedTextWord) *DetectedTextLine {
	this := DetectedTextLine{}
	this.Text = text
	this.BoundingPolygon = boundingPolygon
	this.Words = words
	return &this
}

// NewDetectedTextLineWithDefaults instantiates a new DetectedTextLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectedTextLineWithDefaults() *DetectedTextLine {
	this := DetectedTextLine{}
	return &this
}

// GetText returns the Text field value
func (o *DetectedTextLine) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *DetectedTextLine) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *DetectedTextLine) SetText(v string) {
	o.Text = v
}

// GetBoundingPolygon returns the BoundingPolygon field value
func (o *DetectedTextLine) GetBoundingPolygon() []ImagePoint {
	if o == nil {
		var ret []ImagePoint
		return ret
	}

	return o.BoundingPolygon
}

// GetBoundingPolygonOk returns a tuple with the BoundingPolygon field value
// and a boolean to check if the value has been set.
func (o *DetectedTextLine) GetBoundingPolygonOk() ([]ImagePoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoundingPolygon, true
}

// SetBoundingPolygon sets field value
func (o *DetectedTextLine) SetBoundingPolygon(v []ImagePoint) {
	o.BoundingPolygon = v
}

// GetWords returns the Words field value
func (o *DetectedTextLine) GetWords() []DetectedTextWord {
	if o == nil {
		var ret []DetectedTextWord
		return ret
	}

	return o.Words
}

// GetWordsOk returns a tuple with the Words field value
// and a boolean to check if the value has been set.
func (o *DetectedTextLine) GetWordsOk() ([]DetectedTextWord, bool) {
	if o == nil {
		return nil, false
	}
	return o.Words, true
}

// SetWords sets field value
func (o *DetectedTextLine) SetWords(v []DetectedTextWord) {
	o.Words = v
}

func (o DetectedTextLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetectedTextLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["boundingPolygon"] = o.BoundingPolygon
	toSerialize["words"] = o.Words
	return toSerialize, nil
}

func (o *DetectedTextLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"boundingPolygon",
		"words",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetectedTextLine := _DetectedTextLine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetectedTextLine)

	if err != nil {
		return err
	}

	*o = DetectedTextLine(varDetectedTextLine)

	return err
}

type NullableDetectedTextLine struct {
	value *DetectedTextLine
	isSet bool
}

func (v NullableDetectedTextLine) Get() *DetectedTextLine {
	return v.value
}

func (v *NullableDetectedTextLine) Set(val *DetectedTextLine) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectedTextLine) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectedTextLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectedTextLine(val *DetectedTextLine) *NullableDetectedTextLine {
	return &NullableDetectedTextLine{value: val, isSet: true}
}

func (v NullableDetectedTextLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectedTextLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


