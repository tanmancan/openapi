/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
)

// checks if the SingleVectorResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleVectorResult{}

// SingleVectorResult Results of image vectorization.
type SingleVectorResult struct {
	// Vector of the image.
	Vector []float32 `json:"vector,omitempty"`
	// Model version.
	ModelVersion *string `json:"modelVersion,omitempty"`
}

// NewSingleVectorResult instantiates a new SingleVectorResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleVectorResult() *SingleVectorResult {
	this := SingleVectorResult{}
	return &this
}

// NewSingleVectorResultWithDefaults instantiates a new SingleVectorResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleVectorResultWithDefaults() *SingleVectorResult {
	this := SingleVectorResult{}
	return &this
}

// GetVector returns the Vector field value if set, zero value otherwise.
func (o *SingleVectorResult) GetVector() []float32 {
	if o == nil || IsNil(o.Vector) {
		var ret []float32
		return ret
	}
	return o.Vector
}

// GetVectorOk returns a tuple with the Vector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleVectorResult) GetVectorOk() ([]float32, bool) {
	if o == nil || IsNil(o.Vector) {
		return nil, false
	}
	return o.Vector, true
}

// HasVector returns a boolean if a field has been set.
func (o *SingleVectorResult) HasVector() bool {
	if o != nil && !IsNil(o.Vector) {
		return true
	}

	return false
}

// SetVector gets a reference to the given []float32 and assigns it to the Vector field.
func (o *SingleVectorResult) SetVector(v []float32) {
	o.Vector = v
}

// GetModelVersion returns the ModelVersion field value if set, zero value otherwise.
func (o *SingleVectorResult) GetModelVersion() string {
	if o == nil || IsNil(o.ModelVersion) {
		var ret string
		return ret
	}
	return *o.ModelVersion
}

// GetModelVersionOk returns a tuple with the ModelVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleVectorResult) GetModelVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ModelVersion) {
		return nil, false
	}
	return o.ModelVersion, true
}

// HasModelVersion returns a boolean if a field has been set.
func (o *SingleVectorResult) HasModelVersion() bool {
	if o != nil && !IsNil(o.ModelVersion) {
		return true
	}

	return false
}

// SetModelVersion gets a reference to the given string and assigns it to the ModelVersion field.
func (o *SingleVectorResult) SetModelVersion(v string) {
	o.ModelVersion = &v
}

func (o SingleVectorResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleVectorResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vector) {
		toSerialize["vector"] = o.Vector
	}
	if !IsNil(o.ModelVersion) {
		toSerialize["modelVersion"] = o.ModelVersion
	}
	return toSerialize, nil
}

type NullableSingleVectorResult struct {
	value *SingleVectorResult
	isSet bool
}

func (v NullableSingleVectorResult) Get() *SingleVectorResult {
	return v.value
}

func (v *NullableSingleVectorResult) Set(val *SingleVectorResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleVectorResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleVectorResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleVectorResult(val *SingleVectorResult) *NullableSingleVectorResult {
	return &NullableSingleVectorResult{value: val, isSet: true}
}

func (v NullableSingleVectorResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleVectorResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


