/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BoundingBox type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoundingBox{}

// BoundingBox A bounding box for an area inside an image.
type BoundingBox struct {
	// Left-coordinate of the top left point of the area, in pixels.
	X int32 `json:"x"`
	// Top-coordinate of the top left point of the area, in pixels.
	Y int32 `json:"y"`
	// Width measured from the top-left point of the area, in pixels.
	W int32 `json:"w"`
	// Height measured from the top-left point of the area, in pixels.
	H int32 `json:"h"`
}

type _BoundingBox BoundingBox

// NewBoundingBox instantiates a new BoundingBox object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoundingBox(x int32, y int32, w int32, h int32) *BoundingBox {
	this := BoundingBox{}
	this.X = x
	this.Y = y
	this.W = w
	this.H = h
	return &this
}

// NewBoundingBoxWithDefaults instantiates a new BoundingBox object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoundingBoxWithDefaults() *BoundingBox {
	this := BoundingBox{}
	return &this
}

// GetX returns the X field value
func (o *BoundingBox) GetX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *BoundingBox) GetXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *BoundingBox) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *BoundingBox) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *BoundingBox) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *BoundingBox) SetY(v int32) {
	o.Y = v
}

// GetW returns the W field value
func (o *BoundingBox) GetW() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.W
}

// GetWOk returns a tuple with the W field value
// and a boolean to check if the value has been set.
func (o *BoundingBox) GetWOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.W, true
}

// SetW sets field value
func (o *BoundingBox) SetW(v int32) {
	o.W = v
}

// GetH returns the H field value
func (o *BoundingBox) GetH() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.H
}

// GetHOk returns a tuple with the H field value
// and a boolean to check if the value has been set.
func (o *BoundingBox) GetHOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.H, true
}

// SetH sets field value
func (o *BoundingBox) SetH(v int32) {
	o.H = v
}

func (o BoundingBox) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoundingBox) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["w"] = o.W
	toSerialize["h"] = o.H
	return toSerialize, nil
}

func (o *BoundingBox) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
		"w",
		"h",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoundingBox := _BoundingBox{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoundingBox)

	if err != nil {
		return err
	}

	*o = BoundingBox(varBoundingBox)

	return err
}

type NullableBoundingBox struct {
	value *BoundingBox
	isSet bool
}

func (v NullableBoundingBox) Get() *BoundingBox {
	return v.value
}

func (v *NullableBoundingBox) Set(val *BoundingBox) {
	v.value = val
	v.isSet = true
}

func (v NullableBoundingBox) IsSet() bool {
	return v.isSet
}

func (v *NullableBoundingBox) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoundingBox(val *BoundingBox) *NullableBoundingBox {
	return &NullableBoundingBox{value: val, isSet: true}
}

func (v NullableBoundingBox) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoundingBox) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


