/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReadResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadResult{}

// ReadResult The results of an Read operation.
type ReadResult struct {
	// A list of text blocks.
	Blocks []DetectedTextBlock `json:"blocks"`
}

type _ReadResult ReadResult

// NewReadResult instantiates a new ReadResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadResult(blocks []DetectedTextBlock) *ReadResult {
	this := ReadResult{}
	this.Blocks = blocks
	return &this
}

// NewReadResultWithDefaults instantiates a new ReadResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadResultWithDefaults() *ReadResult {
	this := ReadResult{}
	return &this
}

// GetBlocks returns the Blocks field value
func (o *ReadResult) GetBlocks() []DetectedTextBlock {
	if o == nil {
		var ret []DetectedTextBlock
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *ReadResult) GetBlocksOk() ([]DetectedTextBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks, true
}

// SetBlocks sets field value
func (o *ReadResult) SetBlocks(v []DetectedTextBlock) {
	o.Blocks = v
}

func (o ReadResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blocks"] = o.Blocks
	return toSerialize, nil
}

func (o *ReadResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blocks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReadResult := _ReadResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReadResult)

	if err != nil {
		return err
	}

	*o = ReadResult(varReadResult)

	return err
}

type NullableReadResult struct {
	value *ReadResult
	isSet bool
}

func (v NullableReadResult) Get() *ReadResult {
	return v.value
}

func (v *NullableReadResult) Set(val *ReadResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReadResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReadResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadResult(val *ReadResult) *NullableReadResult {
	return &NullableReadResult{value: val, isSet: true}
}

func (v NullableReadResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


