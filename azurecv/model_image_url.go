/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImageUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageUrl{}

// ImageUrl A JSON document with a URL pointing to the image that is to be analyzed.
type ImageUrl struct {
	// Publicly reachable URL of an image.
	Url string `json:"url"`
}

type _ImageUrl ImageUrl

// NewImageUrl instantiates a new ImageUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageUrl(url string) *ImageUrl {
	this := ImageUrl{}
	this.Url = url
	return &this
}

// NewImageUrlWithDefaults instantiates a new ImageUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageUrlWithDefaults() *ImageUrl {
	this := ImageUrl{}
	return &this
}

// GetUrl returns the Url field value
func (o *ImageUrl) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ImageUrl) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ImageUrl) SetUrl(v string) {
	o.Url = v
}

func (o ImageUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *ImageUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageUrl := _ImageUrl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageUrl)

	if err != nil {
		return err
	}

	*o = ImageUrl(varImageUrl)

	return err
}

type NullableImageUrl struct {
	value *ImageUrl
	isSet bool
}

func (v NullableImageUrl) Get() *ImageUrl {
	return v.value
}

func (v *NullableImageUrl) Set(val *ImageUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableImageUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableImageUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageUrl(val *ImageUrl) *NullableImageUrl {
	return &NullableImageUrl{value: val, isSet: true}
}

func (v NullableImageUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


