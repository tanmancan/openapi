/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetectedObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetectedObject{}

// DetectedObject Describes a detected object in an image.
type DetectedObject struct {
	// Id of the detected object.
	Id *string `json:"id,omitempty"`
	BoundingBox BoundingBox `json:"boundingBox"`
	// Classification confidences of the detected object.
	Tags []ContentTag `json:"tags"`
}

type _DetectedObject DetectedObject

// NewDetectedObject instantiates a new DetectedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectedObject(boundingBox BoundingBox, tags []ContentTag) *DetectedObject {
	this := DetectedObject{}
	this.BoundingBox = boundingBox
	this.Tags = tags
	return &this
}

// NewDetectedObjectWithDefaults instantiates a new DetectedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectedObjectWithDefaults() *DetectedObject {
	this := DetectedObject{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetectedObject) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetectedObject) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetectedObject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DetectedObject) SetId(v string) {
	o.Id = &v
}

// GetBoundingBox returns the BoundingBox field value
func (o *DetectedObject) GetBoundingBox() BoundingBox {
	if o == nil {
		var ret BoundingBox
		return ret
	}

	return o.BoundingBox
}

// GetBoundingBoxOk returns a tuple with the BoundingBox field value
// and a boolean to check if the value has been set.
func (o *DetectedObject) GetBoundingBoxOk() (*BoundingBox, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BoundingBox, true
}

// SetBoundingBox sets field value
func (o *DetectedObject) SetBoundingBox(v BoundingBox) {
	o.BoundingBox = v
}

// GetTags returns the Tags field value
func (o *DetectedObject) GetTags() []ContentTag {
	if o == nil {
		var ret []ContentTag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *DetectedObject) GetTagsOk() ([]ContentTag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *DetectedObject) SetTags(v []ContentTag) {
	o.Tags = v
}

func (o DetectedObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetectedObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["boundingBox"] = o.BoundingBox
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *DetectedObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"boundingBox",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetectedObject := _DetectedObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetectedObject)

	if err != nil {
		return err
	}

	*o = DetectedObject(varDetectedObject)

	return err
}

type NullableDetectedObject struct {
	value *DetectedObject
	isSet bool
}

func (v NullableDetectedObject) Get() *DetectedObject {
	return v.value
}

func (v *NullableDetectedObject) Set(val *DetectedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectedObject(val *DetectedObject) *NullableDetectedObject {
	return &NullableDetectedObject{value: val, isSet: true}
}

func (v NullableDetectedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


