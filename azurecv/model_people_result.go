/*
Computer Vision APIs (2024-02-01)

The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the people in an image.  It also has other features like categorizing the content of images, and describing an image with complete English sentences.

API version: 2024-02-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package azurecv

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PeopleResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeopleResult{}

// PeopleResult An object describing whether the image contains people.
type PeopleResult struct {
	// An array of detected people.
	Values []DetectedPerson `json:"values"`
}

type _PeopleResult PeopleResult

// NewPeopleResult instantiates a new PeopleResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleResult(values []DetectedPerson) *PeopleResult {
	this := PeopleResult{}
	this.Values = values
	return &this
}

// NewPeopleResultWithDefaults instantiates a new PeopleResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleResultWithDefaults() *PeopleResult {
	this := PeopleResult{}
	return &this
}

// GetValues returns the Values field value
func (o *PeopleResult) GetValues() []DetectedPerson {
	if o == nil {
		var ret []DetectedPerson
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *PeopleResult) GetValuesOk() ([]DetectedPerson, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *PeopleResult) SetValues(v []DetectedPerson) {
	o.Values = v
}

func (o PeopleResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeopleResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *PeopleResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPeopleResult := _PeopleResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPeopleResult)

	if err != nil {
		return err
	}

	*o = PeopleResult(varPeopleResult)

	return err
}

type NullablePeopleResult struct {
	value *PeopleResult
	isSet bool
}

func (v NullablePeopleResult) Get() *PeopleResult {
	return v.value
}

func (v *NullablePeopleResult) Set(val *PeopleResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleResult(val *PeopleResult) *NullablePeopleResult {
	return &NullablePeopleResult{value: val, isSet: true}
}

func (v NullablePeopleResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


